제어문
코드의 실행 흐름을 제어하는 데 사용되는 구문
조건에 따라 코드 블록을 실행하거나 반복적으로 코드를 실행
조건문, 반복문, 반복문 제어가 여기에 포함
조건문-if ,elif, else
참인 경우에만 코드블록을 실행하거나 건너뜀
if 표현식:
코드블록
elif 표현식:
코드블록
else:
코드블록
근데 elif는 여기서 빼기도 함.
조건식은 반드시 순서대로 진행된다!
그리고 중첩 조건문도 가능
그리고 조건문에서 if는 필수 나머지는 필수 아님!
반복문-주어진 코드 블록을 여러번 반복해서 실행하는 구문
for/ while- 특정 작업을 반복적으로 수행/주어진 조건이 참인 동안 반복해서 실행
for- 임의의 시퀀스의 항목들을 그 시퀀스에 들어있는 순서대로 반복
for 변수 in 반복 가능한 객체:
코드블록- 기본구조
반복 가능한 객체(iterable)-map에서 썻음
반복문에서 순회할 수 있는 객체
dict, set 등도 포함- 순서가 없긴 한데 출력되는 순서는 보장해줘서 반복은 가능
for 문 작동원리
리스트 내 첫 항목이 반봅ㄱ 변수에 할당되고 코드블록 실행
다음으로 반복 변수에 리스트의 2번째 항목이 할당되고 코드블록이 다시 실행
마지막으로 반복 변수에 리스트의 마지막 요소가 할당되고 코드블록이 실행
while 문
주어진 조건식이 참인 동안 코드를 반복해서 실행, 조건식이 거짓이 될 때까지 반복
while 조건식:
코드블록
while문은 반드시 종료 조건이 필요하다!

for- 반복 횟수가 명확하게 정해져 있는 경우에 유용
while- 반복 횟수가 불명확하거나 조건에 따라 반복을 종료해야 할 때 유용

반복제어- 계속 반복하다 때때로 일부만 실행하는 것이 필요할 때가 있음
break- 반복 즉시 중지
continue- 다음 반복으로 건너뜀, 현재 반복문의 남은 코드를 건너뛰고 다음 반복으로 넘어감.
pass- 아무런 동작도 수행하지 않고 넘어감
pass 예시
1. 코드 작성 중 미완성 부분-이래야 컴파일 중 오류 발생 안함
2. 조건문에서 아무런 동작을 수행하지 않아야 할 때
3. 무한 루프에서 조건이 충족되지 않을 때 pass를 사용하여 루프를 계속 진행하는 방법

list comprehension
간결하고 효율적인 리스트 생성 방법
for num in numbers:
    squared_numbers.append(num**2)
밑과 같이 변환하면 짧아짐.
squared_numbers2 = [num**2 for num in numbers]
squared_numbers2 = list(num**2 for num in numbers)
이것도 됨.
그런데 2줄짜리가 가독성은 더 좋다. 그래서 한줄짜리가 더 간편하기 하지만 가독성은 떨어짐
그래서 너무 for 문을 너무 사용하지 않으면 안됨
컴프리핸션을 너무 남용하면 안됨.
컴프리핸션 스이는 예시 -2차원 배열 생성 시
help(math) 이렇게 쓰면 모듈에 무엇이 들어있는지 확인 가능
enumerate(iterable, start=0)-알아두면 좋음, iterable 객체의 각 요소에 대해 인덱스와 함께 반환하는 내장함수