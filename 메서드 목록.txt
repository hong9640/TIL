1. str 관련
1️⃣ .strip() / .lstrip() / .rstrip() → 공백 제거
text = "  hello world!  "
print(text.strip())   # "hello world!"
print(text.lstrip())  # "hello world!  " (왼쪽 공백 제거)
print(text.rstrip())  # "  hello world!" (오른쪽 공백 제거)

2️⃣ .split() → 문자열을 특정 기준으로 나누기
sentence = "apple,banana,grape
words = sentence.split(",")  
print(words)  # ['apple', 'banana', 'grape']

3️⃣ .join() → 리스트를 문자열로 합치기
words = ['apple', 'banana', 'grape']
joined = ", ".join(words)
print(joined)  # "apple, banana, grape"

4️⃣ .replace() → 문자열 특정 부분 교체
text = "I like apples"
print(text.replace("apples", "bananas"))  # "I like bananas"

5️⃣ .find() → 특정 문자의 위치 찾기
text = "hello world"
print(text.find("o"))  # 4 (처음 발견된 위치 반환)
print(text.find("x"))  # -1 (존재하지 않으면 -1 반환)

6️⃣ .startswith() / .endswith() → 특정 문자열로 시작/끝나는지 확인
text = "hello world"
print(text.startswith("hello"))  # True
print(text.endswith("world"))    # True

2. 리스트 관련

1️⃣ .append() → 리스트에 요소 추가
numbers = [1, 2, 3]
numbers.append(4)
print(numbers)  # [1, 2, 3, 4]

2️⃣ .extend() → 리스트에 여러 요소 추가
numbers = [1, 2, 3]
numbers.extend([4, 5])
print(numbers)  # [1, 2, 3, 4, 5]

3️⃣ .insert() → 특정 위치에 요소 삽입
numbers = [1, 2, 4]
numbers.insert(2, 3)  # 2번 인덱스에 3 삽입
print(numbers)  # [1, 2, 3, 4]

4️⃣ .remove() → 특정 값 제거
numbers = [1, 2, 3, 2]
numbers.remove(2)  # 첫 번째로 등장한 2 제거
print(numbers)  # [1, 3, 2]

5️⃣ .pop() → 마지막 요소 또는 특정 위치 요소 제거
numbers = [1, 2, 3]
print(numbers.pop())   # 3 (마지막 요소 반환 후 삭제)
print(numbers.pop(0))  # 1 (0번 인덱스 요소 반환 후 삭제)
print(numbers)  # [2]

6️⃣ .index() → 특정 값의 인덱스 반환
numbers = [10, 20, 30, 40]
print(numbers.index(30))  # 2

7️⃣ .count() → 특정 값이 리스트에 몇 개 있는지 확인
numbers = [1, 2, 2, 3, 2, 4]
print(numbers.count(2))  # 3

8️⃣ .sort() → 리스트 정렬
numbers = [3, 1, 4, 2]
numbers.sort()  
print(numbers)  # [1, 2, 3, 4]
numbers.sort(reverse=True)  
print(numbers)  # [4, 3, 2, 1] (내림차순 정렬)

3. 딕셔너리 관련

1️⃣ .keys() / .values() / .items() → 키, 값, 키-값 쌍 가져오기
person = {"name": "Alice", "age": 25, "city": "Seoul"}
print(person.keys())   # dict_keys(['name', 'age', 'city'])
print(person.values()) # dict_values(['Alice', 25, 'Seoul'])
print(person.items())  # dict_items([('name', 'Alice'), ('age', 25), ('city', 'Seoul')])

2️⃣ .get() → 키 값 가져오기 (기본값 설정 가능)
person = {"name": "Alice", "age": 25}
print(person.get("name"))  # "Alice"
print(person.get("city", "Unknown"))  # "Unknown" (없는 키일 때 기본값 설정)

3️⃣ .update() → 딕셔너리 값 업데이트
person = {"name": "Alice", "age": 25}
person.update({"age": 26, "city": "Seoul"})
print(person)  # {'name': 'Alice', 'age': 26, 'city': 'Seoul'}

4️⃣ .pop() → 특정 키 삭제 후 반환
person = {"name": "Alice", "age": 25}
age = person.pop("age")
print(person)  # {'name': 'Alice'}
print(age)  # 25 (삭제된 값 반환)

5️⃣ .setdefault() → 키가 없으면 추가하고 기본값 설정
person = {"name": "Alice"}
person.setdefault("age", 25)  # age가 없으면 추가
print(person)  # {'name': 'Alice', 'age': 25}

자료형	메서드	설명
문자열	strip(), split(), join(), replace(), find()	공백 제거, 문자열 나누기/합치기, 특정 문자 변경, 검색
리스트	append(), extend(), insert(), remove(), pop(), sort()	추가, 삭제, 정렬
딕셔너리	keys(), values(), items(), get(), update(), pop()	키, 값 조회 및 수정
