python 함수
파이썬 함수

1. 함수란?
-특정 작업을 수행하기 위한 재사용 가능한 코드 묶음
  1) 함수 사용 이유는 재사용성, 코드의 가독성과 유지보수성 높이기 위해!

ex)def get_sum(num1, num2):
    return num1 + num2------------->함수를 넣으면 유지보수성 향상. 변수 값을 바꿔도 출력


2. 함수 호출-function call
-함수를 실행하기 위해 함수 이름을 쓰는 것
-함수이름(변수)
ex) def make_sum(pram1, pram2):---------input
    """이것은 두 수를 받아
    두 수의 합을 반환하는 함수입니다.-------------functinon body(함수의 설명), (주석이라고 보기도 됨)
    >>> make_sum(1, 2)
    3
    """
    return pram1 + pram2------------output

2-1. 함수 정의
1)함수 정의는 def로 시작-콜론:을 쓰면 다음 줄은 자동으로 들여쓰기 됨
2)def 다음에 함수 이름 작성
docstring-함수 바디앞에 작성 가능한 설명서-써도 되고 안써도 되고 주석이니까
return문은 함수 반환 값-이 문은 함수의 실행을 종료, 결과를 반환. 만약 함수 내 return이 없으면 그 함수는 죽은 것임. none나옴.
함수 호출을 위해서는 함수 이름과 소괄호를 활용해 호출한다, 필요한 경우에는 인자를 전달하는데 함수가 정의된 위치에 따라 정의됨.
대표적으로 print는 반환 값이 없음
return_vlaue =print(1)
print(return_vlaue) #none-----이렇게 반환 값은 없음

def my_func():
    print('hello')----얘는 출력

result = my_func()
print(result)------반환 값이 없어서 none 나옴

매개변수-함수를 정의할 때
인자- 함수를 호출할 때
이 두개가 가장 큰 차이
ex)
# 두 수의 합을 구하는 코드
num1 = 5
num2 = 3
sum_result = num1 + num2------인자
print(sum_result)

# 두 수의 합을 구하는 함수
def get_sum(num1, num2):-----매개변수
    return num1 + num2
인자종류
1) 위치인자
함수 호출 시 인자의 위치에 따라 전달되는 인자-이 인자는 함수 호출 시 반드시 값을 전달해야 함
ex)
def greet(name, age):
    print(f'안녕하세요, {name}님! {age}살이시군요.')


greet('Alice', 25)  # 안녕하세요, Alice님! 25살이시군요.-----이렇게 위치에 따라 그 출력값이 달라짐
greet(25, 'Alice')  # 안녕하세요, 25님! Alice살이시군요.
greet(
    'Alice'
)  # TypeError: greet() missing 1 required positional argument: 'age'---개수가 반드시 맞아야 함!
2)기본 인자-매개변수에 기본 값을 할당, 함수 호출 시 인자를 전달 안하면 기본 값이 매개변수에 할당
def greet(name, age=30):
    print(f'안녕하세요, {name}님! {age}살이시군요.')

greet('Bob')  # 안녕하세요, Bob님! 30살이시군요.--------age가 30으로 할당됨 그래서 이렇게 출력
greet('Charlie', 40)  # 안녕하세요, Charlie님! 40살이시군요.
키워드인자- 함수 호출 시 인자의 이름과 함께 값을 전달
매개변수와 인자를 일치시키지 않고 특정 매개변수에 값을 할당 할 수 있음, 인자 순서 안중요함, 키워드 인자는 위치 인자 뒤에 위치해야 함.

임의의 인자 목록-가변
정해지지 않은 개수의 인자를 처리하는 인자, 함수 정의 시 매개변수 앞에 *을 붙여 사용, 여러개의 인자를 튜플로 처리

키워드 인자- 정해지지 않은 개수의 키워드 인자를 처리하는 인자, 함수정의 시 매개변수 앞에 **를 붙여 사용-가변키워드
여러개의 인자를 dict로 묶어 처리

그런데 이거를 섞으면 혼동됨. 그래서 권장 작성 순서가 있음 위치->기본->가변->가변 키워드

재귀함수- 함수 내부에서 자기 자신을 호출하는 함수
예시로 팩토리얼 있음
팩토리얼은 뭐... n! 이렇게 가는데 조건에 맞게 가다가 해당 조건에 마주치면 종료
이렇게 되는 것임
 f(4)=4*f(3)---같은 문제를 다른 input을 통해 해결->베이스 케이스 (종료되는 상황)수렴
 f(3)=3*f(2)
f(2)=2*f(1)
f(1)=1
재귀함수 사용하는 이유
문제의 자연스러운 표현, 코드 간결성, 수학적 문제 해결
종료 조건 명확히
반복되는 호출이 종료 조건을 향하도록