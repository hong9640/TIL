데이터 구조- 여러 데이터를 효과적으로 사용, 관리하기 위한 구조
컴공에서는 자료구조라고 함.
각 데이터 구조의 메서드를 호출하여 다양한 기능 활용 가능
오늘부터 append는 메스드임
메서드는? 객체에 속한 함수, 객체의 상태를 조작하거나 동작을 수행
-종속되어 있음
메서드 특징
클래스 내부에 정의되는 함수, 클래스는 파이썬에서 '타입을 표현하는 방법'이며 이미 은연중에 사용해왔음
ex) 예를 들어 help함수를 통해 str을 호출해보면 class였다는 것을 확인 가능
지금 시점에 알아야 할 것.- 메서드는 어딘가(클래스)에 속해 있는 함수
-각 데이터 타입별로 다양한 기능을 가진 메서드가 존재
append-> list 에서만 쓸 수 있는 메서드임. 다른 데는 안됨.
'hello'.capitalize()->데이터 타입 객체.메서드()
문자열
-메서드 여러개 있음. 파일 참고하기!
find(x)-x의 첫번째 위치를 반환. 없으면 -1 반환
index(x)- x의 첫 번째 위치를 반환. 없으면 오류 발생
isupper()->괄호 안에 아무것도 있으면 안됨. 문자열이 모두 대문자인지
islower()-문자열이 모두 소문자인자
isalpha()-문자열이 모두 알파벳으로만 이루어져 있는지
.replace(old, new, count)-old 글자를 new 글자로 바꿈 count가 없으면 전체 다 바꿈
count에 대괄호를 쓸 때가 있긴 한데 이건 선택적 인자의 의미.
.strip(chars)-대괄호를 chars에 붙이는 경우가 있긴 한데 선택적 인자에만 쓰임. 안써도 됨!
-문자열의 시작과 끝에 있는 공백 혹인 지정한 문자를 제거
.split(sep=none, maxsplit= -1) sep를 구분자 문자열로 사용하여 문자열에 있는 단어들의 리스트를 반환
'separator'.join(iterable)- iterable의 문자열을 연결한 문자열을 반환, 여기서는 숫자도 '1' 이렇게 써야 함.
정수형이 아니고 문자열 메서드임. 그래서 무조건 문자열을 써야함! 
capitalize - 가장 첫 번째 글자를 대문자로 변경
title- 문자열 내 띄어쓰기 기준으로 각 단어의 첫 글자느 ㄴ대문자로, 나머지는 소문자로 변환
나머지는 파일 참고!

리스트
append(x) 리스트 마지막에 항목x를 추가
extend(iterable) 리스트에 다른 반복 가능한 객체의 모든 항목을 추가, 반복 가능한 객체가 아니면 추가 불가 +=기능과 같음
insert(i, x)-리스트의 지정한 인덱스i 위치에 항목x를 삽입
remove -리스트에서 첫 번째로 일치하는 항목을 삭제
pop(i)-리스트에서 지정한 인덱스의 항목을 제거하고 *반환*. 작성하지 않을 경우 마지막 항목을 제거
.clear- 리스트의 모든 항목 삭제
index(x) 리스트에서 첫 번째로 일치하는 항목x의 인덱스를 반환
count(x)-리스트에서 항목x의 개수를 반환
reverse()- 리스트의 순서를 역순으로 변경
sort- 원본 리스트를 오름차순으로 정렬
my_list.sort(reverse = True) - 내림차순
reversed- 이건 내장함수!

복사
가변 객체: 생성 후 내용을 변경 가능-list, dict, set
불변 객체: 생성 후 내용을 변경할 수 없는 객체
str,int,float,tuple
변수는 객체의 메모리 주로를 가리키는 label역할을 함
'='연산자를 사용하여 변수에 값을 할당
메모리 참조 방식- 변수는 객체의 메모리 주소를 저장, 여러 변수가 동일한 객체 참조 가능
가변 객체의 경우 주소를 할당
불변 객체의 경우 값을 할당
가변-생성 후 내용 수정 가능, 객체 내용 변경되도 같은 메모리 주소 유지
불변- 생성 후 내용 수정 불가능, 새로운 값 할당하면 새롱누 객체 생성, 변수는 새 객체를 참조
서로 상호 보완적임
복사는 2가지. 얕은 복사. 깊은 복사
얕은 복사- 객체의 최상위 요소만 새로운 메모리에 복사하는 방법, 내부에 중첩된 객체가 잇다면 그 객체의 참조만 복사됨
구현방법-리스트 슬라이싱, copy 메서드, list 함수
1차원 리스트- 얕은 복사로 충분히 독립적인 복사본을 만들 수 있음
다차원 리스트- 최상위 리스트만 복사되고, 내부 리스트는 여전히 원본과 같은 객체를 참조

깊은 복사- copy 모듈에서 제공하는 deepcopy함수를 사용
더 공부 필요 아직 이해 잘 안간다 ㅠㅠ
메서드 체이닝- 여러 메서드를 연속해서 호출하는 방식 

text = 'heLLo, woRld!'
new_text = text.swapcase().replace('l', 'z') -swapcase()에서 반환 되어서 그 뒤에 다른 메서드 올 수 있음
print(new_text)  # HEzzO, WOrLD!

numbers = [3, 1, 4, 1, 5, 9, 2]
result = numbers.copy().sort()- sort는 none을 반환하므로 체이닝 중단
append는 반환값이 없다. 반환값이 none임.
ex) 리스트 관련 메서드 append, extend, sort, reverse 집합 관련- add, remove는 none 반환
단, 객체 자신을 반환하면 가능. 근데 이거는 코드가 길어서... 일단 끝에 return이 있으면 되는 거 같은데  챗 gpt 참고하기

