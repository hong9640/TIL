파이썬2
non-sequence
dict-딕셔너리
key와 value쌍으로 이루어진 순서와 중복이 없는 변경 가능한 자료형
우선 key는 변경 불가능한 자료형 만(인트나 플로트 등등)
value는 모든 자료형 가능, {}중괄호 표기
my_dict_2 = {'key': 'value'} 이렇게 중간에 : 콜론 필수!!
이거는 리스트의 각 값에 이름을 주는 것
# 딕셔너리는 키에 접근해 값을 얻어냄
my_dict = {'apple': 12, 'list': [1, 2, 3]}
print(my_dict['apple']) #12
print(my_dict['list']) #[1,2,3]
이렇게!
그리고 딕셔너리에 key는 순서가 없음!
값은 중복 가능, key간에는 중복이 일어날 수 없음!
만약 동일한 key가 여러 번 등장하면 뒤에 나온 값이 앞의 값을 덮어쓴다!

set
순서와 중복이 없는 변경 가능한 자료형
수학에서의 집합과 동일한 연산 처리 가능, 중괄호로 표기
딕셔너리도 중괄호 씀. 그래서 이렇게 작성 해야 함!
set1 - set() ->이거 필수!
my_set_1 = {1, 2, 3}
my_set_2 = {3, 6, 9}
# 합집합
print(my_set_1 | my_set_2)  # {1, 2, 3, 6, 9}
# 차집합
print(my_set_1 - my_set_2)  # {1, 2}
# 교집합
print(my_set_1 & my_set_2)  # {3}
이렇게 기호하고 규칙 기억하기! 그리고 set도 순서 없음! 그래서 index 구조 안됨!

None- 값이 없음을 표현하는 자료형
boolean-참과 거짓을 표현하는 자료형
비교/논리연산의 평가 결과로 사용됨, 주로 조건,반복문과 함께 사용
collection-여러 개의 항목 또는 요소를 담는 자료 구조-str, list등등
-순서 여부는 시퀀스가 있냐 없느냐 차이!
그리고 list, dict 이 두개가 알고리즘, api에서 많이 쓰임! 가장 중요!

형변환
한 데이터 타입을 다른 데이터 타입으로 변환하는 과정
암시적/명시적 형변환 2개 있음
암시적 형변환-파이썬이 자동으로 수행
boolean과 numeric에서만 가능!
ex) ture+false=1

명시적 형면환-프로그래머가 지정. 암시적이 아닌 모든 것

복합연산자는 파이썬에서 그렇게 권장 하지는 않음. 
1. 복합 연산자 (Compound Operators)
기호	내용
+=	왼쪽 변수에 오른쪽 값을 더한 후 그 값을 왼쪽 변수에 저장
-=	왼쪽 변수에서 오른쪽 값을 뺀 후 그 값을 왼쪽 변수에 저장
*=	왼쪽 변수에 오른쪽 값을 곱한 후 그 값을 왼쪽 변수에 저장
/=	왼쪽 변수를 오른쪽 값으로 나눈 후 그 값을 왼쪽 변수에 저장
//=	왼쪽 변수를 오른쪽 값으로 나눈 몫을 왼쪽 변수에 저장
%=	왼쪽 변수를 오른쪽 값으로 나눈 나머지를 왼쪽 변수에 저장
**=	왼쪽 변수를 오른쪽 값으로 거듭제곱한 후 그 값을 왼쪽 변수에 저장
&=	왼쪽 변수와 오른쪽 값에 대해 비트 AND 연산 후 그 값을 왼쪽 변수에 저장
`	=`
^=	왼쪽 변수와 오른쪽 값에 대해 비트 XOR 연산 후 그 값을 왼쪽 변수에 저장
<<=	왼쪽 변수에 오른쪽 값을 비트 왼쪽으로 시프트 후 그 값을 왼쪽 변수에 저장
>>=	왼쪽 변수에 오른쪽 값을 비트 오른쪽으로 시프트 후 그 값을 왼쪽 변수에 저장

2. 비교 연산자 (Comparison Operators)
기호	내용
==	두 값이 같은지 비교
!=	두 값이 다른지 비교
>	왼쪽 값이 오른쪽 값보다 큰지 비교
<	왼쪽 값이 오른쪽 값보다 작은지 비교
>=	왼쪽 값이 오른쪽 값보다 크거나 같은지 비교
<=	왼쪽 값이 오른쪽 값보다 작거나 같은지 비교
is	두 객체가 동일한 객체(메모리 주소)가 있는지 비교-훨씬 엄격
is not	두 객체가 동일한 객체가 아닌지 비교

is의 경우 객체의 식별성을 비교한다. 그래서 값 자체를 비교하는 것은 적절하지 않음.
그래서 특별한 상황이 아니면 권장 안함
그래서 보통 is 말고 ==을 쓰는게 더 나음
ex)1==true #true

is는 none을 비교할 때 쓰임. 
그리고 none, true, false 이 3개를 싱글턴 객체라고 하는데 프로그램 전체에서 오직 1개만 존재하도록 만들어진 객체
파이썬 전체에서 딱 1개만 사용됨. 그거 빼면 ==만 씀

and, or, not 이 3개를 논리연산자
and- 둘다 맞아야 true
or은 둘 중 하나만 맞아도 true
not-단일 피연산자 부정

단축평가-논리연산에서 두번째 피연산자를 평가하지 않고 결과를 결정
코드 실행을 최적화 하고 불필요한 연산을 피하기 위해 씀
vowels = 'aeiou'

print(('a' and 'b') in vowels)  #flase - ''안에 무언가 있으면 무조건 true 근데 b가 마지막인데 b가 변수에 없어서 거짓
print(('b' and 'a') in vowels)  #true- 얘는 역으로 a가 마지막인데 a가 변수에 있어서 참

단축평가 동작
and-첫번째 피연산자가 거짓이면 전체 표현식은 거짓으로 결정
첫번째 피연산자가 참이면 전체 표현식의 결과는 두번째 피연산자에 의해 결정
or- 첫번째 피연산자가 참인 경우 전체 표현식은 참으로 결정
첫번째 피연산자가 거진인 경우, 전체 표현식의 결과는 두번째 피연산자에 의해 결정.
or-
멤버십 연산자
in-왼쪽 피연산자가 오른쪽 피연산자의 시퀀스에 속하는지를 확인
not in-왼쪽 피연산자가 오른쪽 피연산자의 시퀀스에 속하지 않는지를 확인

시퀀스형 연산자- +와*는 시퀀스 간 연산에서 산술 연산자일때와 다른 역할을 가짐
+는 결합연산자, *은 반복 연산자

연산자 순위
1. 소괄호 2. 인덱싱, 슬라이싱[], 3. 거듭제곱, 단항 연산자,산술연산자,산술연산자(+,-), 비교연산자 객체비교, 맴버십 연산자,논리부정, 논리 and, 논리 or
