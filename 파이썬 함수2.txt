파이썬 함수2
파이썬 함수2
내장 함수
파이썬이 기본적으로 제공하는 함수
print, len 이런거
파이썬 홈페이지에서 파이선 자습서 들어가면 여러가지 있음 거기서 내장함수 누르면 내장함수 내용 나옴

유용한 함수
map(function, iterable) 순회 가능한 데이터구조의 모든 요소에 함수를 적용하고 그 결과를 map object로 반환
맵 활용
numbers = [1, 2, 3]
numbers1 = input().split()
print(numbers1)  # ['1', '2', '3']

numbers2 = list(map(int, input().split()))
print(numbers2)  # [1, 2, 3]

zip(*iterables)
임의의 iterable을 모아 튜플을 원소로 하는  zip object를 변환
여러개의 리스트를 동시에 조회할 때
2차원 리스트의 같은 열 요소를 동시에 조회할 때

함수는 코드 내부에 local scope를 생성, 그 외의 공간에는 global scope로 구분
전역 변수-전역 scope에 정의된 변수
지역변수- 지역 scope에 정의된 변수
전역scope-코드 어디에서든 참조할 수 있는 공간
local-함수가 만든 scope(함수 내부에서만 참조 가능)

변수의 수정주기-변수가 선언되는 위치와 scope에 따라 결정됨
1. bulit-in scope
파이썬이 실행된 이후부터 영원히 유지
2. global scope
모듈이 호출된 시점 이후 혹은 인터프리터가 끝날 때까지 유지
3. local scope
함수가 호출될 때 생성되고, 함수가 종료될 때까지 유지
local-지역범위
enclosed-지역 범위 한 단계 위 범위
gloval-최상단에 위치한 범위
built-in-모든 것을 담고 있는 범위
함수 내에서는 바깥 스코프의 변수에 접근은 가능, 수정은 불가

내장함수의 변수를 이름으로 쓰면 안된다.

sum을 잘못 썻을 경우 del sum 입력하기
a = 1
b = 2

def enclosed():
    a = 10
    c = 3

    def local(c):
        print(a, b, c)  #10 2 500  ---정의

    local(500)---호출
    print(a, b, c)  #10 2 3 ---들여쓰기 영역에 a,b는 없음.


enclosed()

print(a, b)  #1 2 ---전역에 1,2 있음

글로벌 키워드는 변수의 스코프를 전역 범위로 지정하기 위해 사용, 일반적으로 함수 내에서 전역 변수를 수정하려는 경우에 사용
글로벌 키워드 선언 전에 참조 불가
매개변수에는 글로벌 키워드 사용 불가

함수 이름 규칙
소문자와 언더스코어 사용, 동사로 시작하여 함수의 동작 설명, 약어 사용 지양
동사+명사
동사+형용사+명사
get, set 접두사
get_user(), set_user()

단일 책임 원칙
모든 객체는 하나의 명확한 목적과 책임만을 가져야 함.
각 함수는 def 로 각각 나눠야 함. 하나에 다 묶으면 안됨!

패킹- 여러개의 값을 하나의 변수에 묶어서 담는 것.
예시- 한 변수에 콤마로 구분된 값을 넣으면 자동으로 튜플로 처리
*변수명을 사용하면 나머지 모든 값을 리스트로 묶어서 받을 수 있음
*매개변수를 사용하면 호출 시 여러개의 인자를 한 변수에 묶어서 받을 수 있음-튜플 형태로 취급
print함수의 패킹 예시- 프린트 함수에서 임의의 가변인자를 작성할 수 있었던 이유- 인자 개수에 상관없이 튜플 하나로 패킹 되어서 내부에서 처리

언패킹- 패킹된 변수를 풀어서 개별 변수나 함수 인자로 전달
-말 그대로 개별 변수에 할당
*을 활용-리스트나 튜플 등을 함수에 전달할 때 각 요소를 풀어서 개별 인자로 넘겨줄 수 있음
**->딕셔너리 언패킹
패킹/언패킹 연산자 정리
*
패킹 연산자로 사용될 때, 여러 개의 인자를 하나의 리스트나 튜플로 묶음
언패킹 연산자로 사용될 때, 시퀀스나 반복 가능한 객체를 각각의 요소로 언패킹하여 함수의 인자로 전달
88
언패킹 연산자로 사용될 때 딕셔너리의 키-값 쌍을 개별 키워드 인자로 전달
람다 표현식-간단한 연산이나 함수를 한 줄로 표현할 때 사용
함수를 매개변수로 전달하는 경우에도 유용하게 활용